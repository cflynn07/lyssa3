// Generated by CoffeeScript 1.4.0
(function() {
  var controlPage, descend, fnwrap, mkweb, mkwrap, pageWrap, port, proto, s, server, webpage, _phantom,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  mkweb = new Function("exports", "window", phantom.loadModuleSource('webpage'));

  webpage = {};

  mkweb.call({}, webpage, {});

  proto = require('dnode-protocol');

  port = phantom.args[0];

  controlPage = webpage.create();

  fnwrap = function(target) {
    return function() {
      return target.apply(this, arguments);
    };
  };

  descend = function(op, obj, key, val) {
    var cur, keys;
    cur = obj;
    keys = key.split('.');
    while (keys.length > 1) {
      cur = cur[keys.shift()];
    }
    if (op === 'set') {
      cur[keys[0]] = val;
    }
    return cur[keys[0]];
  };

  mkwrap = function(src, pass, special) {
    var k, obj, _fn, _i, _len;
    if (pass == null) {
      pass = [];
    }
    if (special == null) {
      special = {};
    }
    obj = {
      set: function(key, val, cb) {
        if (cb == null) {
          cb = function() {};
        }
        if (typeof val === "function") {
          val = fnwrap(val);
        }
        return cb(descend('set', src, key, val));
      },
      get: function(key, cb) {
        return cb(descend('get', src, key));
      }
    };
    _fn = function(k) {
      return obj[k] = function() {
        var arg, args, i, _j, _len1;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (i = _j = 0, _len1 = args.length; _j < _len1; i = ++_j) {
          arg = args[i];
          if (typeof arg === 'function') {
            args[i] = fnwrap(arg);
          }
        }
        return src[k].apply(src, args);
      };
    };
    for (_i = 0, _len = pass.length; _i < _len; _i++) {
      k = pass[_i];
      _fn(k);
    }
    for (k in special) {
      if (!__hasProp.call(special, k)) continue;
      obj[k] = special[k];
    }
    return obj;
  };

  pageWrap = function(page) {
    return mkwrap(page, ['open', 'includeJs', 'sendEvent', 'release', 'uploadFile'], {
      injectJs: function(js, cb) {
        if (cb == null) {
          cb = function() {};
        }
        return cb(page.injectJs(js));
      },
      evaluate: function(fn, cb) {
        if (cb == null) {
          cb = function() {};
        }
        return cb(page.evaluate(fn));
      },
      render: function(file, cb) {
        if (cb == null) {
          cb = function() {};
        }
        page.render(file);
        return cb();
      }
    });
  };

  _phantom = mkwrap(phantom, ['exit'], {
    injectJs: function(js, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return cb(phantom.injectJs(js));
    },
    createPage: function(cb) {
      return cb(pageWrap(webpage.create()));
    }
  });

  server = proto(_phantom);

  s = server.create();

  s.on('request', function(req) {
    var evil;
    evil = "function(){socket.emit('message', " + (JSON.stringify(JSON.stringify(req))) + " + '\\n');}";
    return controlPage.evaluate(evil);
  });

  controlPage.onAlert = function(msg) {
    if (msg.slice(0, 6) !== "PCTRL ") {
      return;
    }
    return s.parse(msg.slice(6));
  };

  controlPage.onConsoleMessage = function() {
    var msg;
    msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, msg);
  };

  controlPage.open("http://127.0.0.1:" + port + "/", function(status) {
    return s.start();
  });

}).call(this);
